<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body { 
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
      background: #E8F4F8;
      height: 100vh;
      overflow: hidden;
    }
    
    .app-container {
      display: flex;
      height: 100vh;
    }
    
    .sidebar {
      width: 250px;
      background: #2E86AB;
      color: white;
      flex-shrink: 0;
      overflow-y: auto;
      box-shadow: 2px 0 10px rgba(0,0,0,0.1);
    }
    
    .sidebar-header {
      padding: 20px;
      background: #1C5F7B;
      border-bottom: 1px solid rgba(255,255,255,0.1);
    }
    
    .sidebar-header h1 {
      font-size: 1.2rem;
      font-weight: 600;
      text-align: center;
    }
    
    .nav-menu {
      list-style: none;
      padding: 20px 0;
    }
    
    .nav-item {
      margin: 5px 15px;
    }
    
    .nav-link {
      display: flex;
      align-items: center;
      padding: 12px 15px;
      color: rgba(255,255,255,0.8);
      text-decoration: none;
      border-radius: 8px;
      transition: all 0.3s ease;
      cursor: pointer;
      font-size: 0.9rem;
    }
    
    .nav-link:hover {
      background: rgba(255,255,255,0.15);
      color: white;
      transform: translateX(5px);
    }
    
    .nav-link.active {
      background: #5DADE2;
      color: white;
      font-weight: 600;
    }
    
    .nav-icon {
      margin-right: 10px;
      font-size: 1.1rem;
      width: 20px;
      text-align: center;
    }
    
    .main-content {
      flex: 1;
      overflow-y: auto;
      background: #FAFBFC;
    }
    
    .content-header {
      background: white;
      padding: 20px 30px;
      border-bottom: 1px solid #e9ecef;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
    
    .content-header h2 {
      color: #2E86AB;
      font-size: 1.5rem;
      font-weight: 600;
    }
    
    .content-body {
      padding: 30px;
    }
    
    .tab-content {
      display: none;
      animation: fadeIn 0.3s ease;
    }
    
    .tab-content.active {
      display: block;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .card {
      background: white;
      border-radius: 12px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.06);
      margin-bottom: 25px;
      overflow: hidden;
      border: 1px solid #E5F2F7;
    }
    
    .card-header {
      padding: 20px;
      background: #F0F8FC;
      border-bottom: 1px solid #E5F2F7;
      font-weight: 600;
      color: #2E86AB;
    }
    
    .card-body {
      padding: 25px;
    }
    
    .form-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-bottom: 20px;
    }
    
    .form-group {
      display: flex;
      flex-direction: column;
      position: relative;
    }
    
    .form-group label {
      margin-bottom: 8px;
      font-weight: 600;
      color: #2E86AB;
      font-size: 0.9rem;
    }
    
    input, select, textarea {
      padding: 12px;
      border: 2px solid #E5F2F7;
      border-radius: 8px;
      font-size: 0.9rem;
      transition: all 0.3s ease;
      background: white;
    }
    
    input:focus, select:focus, textarea:focus {
      outline: none;
      border-color: #5DADE2;
      box-shadow: 0 0 0 3px rgba(93, 173, 226, 0.1);
    }
    
    .autocomplete-container {
      position: relative;
    }
    
    .autocomplete-dropdown {
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      background: white;
      border: 2px solid #5DADE2;
      border-top: none;
      border-radius: 0 0 8px 8px;
      max-height: 200px;
      overflow-y: auto;
      z-index: 1000;
      display: none;
    }
    
    .autocomplete-item {
      padding: 12px;
      cursor: pointer;
      border-bottom: 1px solid #E5F2F7;
      transition: background 0.2s ease;
    }
    
    .autocomplete-item:hover {
      background: #F0F8FC;
    }
    
    .autocomplete-item:last-child {
      border-bottom: none;
    }
    
    .autocomplete-code {
      font-weight: 600;
      color: #2E86AB;
    }
    
    .autocomplete-name {
      color: #6c757d;
      font-size: 0.85rem;
      margin-top: 2px;
    }
    
    .btn {
      padding: 12px 20px;
      border: none;
      border-radius: 8px;
      font-size: 0.9rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }
    
    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
    
    .btn-primary {
      background: #5DADE2;
      color: white;
    }
    
    .btn-success {
      background: #28a745;
      color: white;
    }
    
    .btn-danger {
      background: #dc3545;
      color: white;
    }
    
    .btn-warning {
      background: #ffc107;
      color: #212529;
    }
    
    .btn-secondary {
      background: #6c757d;
      color: white;
    }
    
    .btn-info {
      background: #17a2b8;
      color: white;
    }
    
    .table-container {
      overflow-x: auto;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.08);
      border: 1px solid #E5F2F7;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
      background: white;
    }
    
    th, td {
      padding: 12px 15px;
      text-align: left;
      border-bottom: 1px solid #E5F2F7;
    }
    
    th {
      background: #F0F8FC;
      font-weight: 600;
      color: #2E86AB;
      font-size: 0.9rem;
    }
    
    tr:hover {
      background: #F8FBFD;
    }
    
    .status-normal { background: #d4edda; color: #155724; }
    .status-low { background: #fff3cd; color: #856404; }
    .status-zero { background: #f8d7da; color: #721c24; }
    
    .text-success { color: #28a745; font-weight: 600; }
    .text-danger { color: #dc3545; font-weight: 600; }
    .text-warning { color: #ffc107; font-weight: 600; }
    .text-info { color: #17a2b8; font-weight: 600; }
    
    .message {
      padding: 12px 15px;
      border-radius: 8px;
      margin: 15px 0;
      font-weight: 500;
    }
    
    .message.success {
      background: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }
    
    .message.error {
      background: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }
    
    .message.warning {
      background: #fff3cd;
      color: #856404;
      border: 1px solid #ffeaa7;
    }
    
    .message.info {
      background: #d1ecf1;
      color: #0c5460;
      border: 1px solid #bee5eb;
    }
    
    .loading {
      display: none;
      text-align: center;
      padding: 20px;
      color: #5DADE2;
      font-style: italic;
    }
    
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }
    
    .stat-card {
      background: white;
      padding: 25px;
      border-radius: 12px;
      text-align: center;
      box-shadow: 0 4px 6px rgba(0,0,0,0.06);
      border-left: 4px solid #5DADE2;
      border: 1px solid #E5F2F7;
    }
    
    .stat-value {
      font-size: 2rem;
      font-weight: 700;
      color: #2E86AB;
      margin-bottom: 5px;
    }
    
    .stat-label {
      color: #6c757d;
      font-size: 0.9rem;
      font-weight: 500;
    }
    
    .actions {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
      margin-bottom: 20px;
    }
    
    @media (max-width: 768px) {
      .sidebar {
        width: 100%;
        height: auto;
        position: fixed;
        top: 0;
        left: -100%;
        z-index: 1000;
        transition: left 0.3s ease;
      }
      
      .sidebar.open {
        left: 0;
      }
      
      .main-content {
        width: 100%;
      }
      
      .form-grid {
        grid-template-columns: 1fr;
      }
      
      .actions {
        flex-direction: column;
      }
    }
  </style>
</head>
<body onload="initializeApp()">
  <div class="app-container">
    <nav class="sidebar">
      <div class="sidebar-header">
        <h1>QASO SYSTEM</h1>
      </div>
      <ul class="nav-menu">
        <li class="nav-item">
          <a class="nav-link active" onclick="showTab('dashboard')">
            <span class="nav-icon">üìä</span>
            Dashboard
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link" onclick="showTab('productos')">
            <span class="nav-icon">üì¶</span>
            Nuevo producto
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link" onclick="showTab('movimientos')">
            <span class="nav-icon">üìã</span>
            Movimientos
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link" onclick="showTab('inventario')">
            <span class="nav-icon">üìä</span>
            Inventario
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link" onclick="showTab('reportes')">
            <span class="nav-icon">üìà</span>
            Reportes
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link" onclick="showTab('buscar')">
            <span class="nav-icon">üîç</span>
            Buscar
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link" onclick="showTab('configuracion')">
            <span class="nav-icon">‚öôÔ∏è</span>
            Configuraci√≥n
          </a>
        </li>
      </ul>
    </nav>

    <div class="main-content">
      <div id="dashboard" class="tab-content active">
        <div class="content-header">
          <h2>Dashboard General</h2>
        </div>
        <div class="content-body">
          <div class="stats-grid" id="statsGrid"></div>
          <div class="card">
            <div class="card-header">Alertas de Stock</div>
            <div class="card-body">
              <div class="actions">
                <button class="btn btn-primary" onclick="loadDashboard()">
                  Actualizar Dashboard
                </button>
                <button class="btn btn-warning" onclick="showStockAlerts()">
                  Ver Alertas de Stock
                </button>
              </div>
              <div id="alertsContainer"></div>
            </div>
          </div>
        </div>
      </div>

      <div id="productos" class="tab-content">
        <div class="content-header">
          <h2>Gesti√≥n de Productos</h2>
        </div>
        <div class="content-body">
          <div class="card">
            <div class="card-header">Registrar Nuevo Producto</div>
            <div class="card-body">
              <form id="formProducto" onsubmit="registrarProducto(event)">
                <div class="form-grid">
                  <div class="form-group">
                    <label for="codigoProd">C√≥digo *</label>
                    <input id="codigoProd" type="text" placeholder="C√≥digo √∫nico del producto" required>
                  </div>
                  <div class="form-group">
                    <label for="nombreProd">Nombre *</label>
                    <input id="nombreProd" type="text" placeholder="Nombre del producto" required>
                  </div>
                  <div class="form-group">
                    <label for="unidadProd">Unidad de Medida</label>
                    <select id="unidadProd" required></select>
                  </div>
                  <div class="form-group">
                    <label for="grupoProd">Grupo</label>
                    <select id="grupoProd" required></select>
                  </div>
                  <div class="form-group">
                    <label for="stockMinProd">Stock M√≠nimo</label>
                    <input id="stockMinProd" type="number" min="0" value="0">
                  </div>
                </div>
                <div class="actions">
                  <button type="submit" class="btn btn-success">
                    Registrar Producto
                  </button>
                  <button type="button" class="btn btn-secondary" onclick="limpiarFormProducto()">
                    Limpiar
                  </button>
                </div>
              </form>
              <div id="msgProd"></div>
            </div>
          </div>
        </div>
      </div>

      <div id="movimientos" class="tab-content">
        <div class="content-header">
          <h2>Registro de Movimientos</h2>
        </div>
        <div class="content-body">
          <div class="card">
            <div class="card-header">Nuevo Movimiento</div>
            <div class="card-body">
              <form id="formMovimiento" onsubmit="registrarMovimiento(event)">
                <div class="form-grid">
                  <div class="form-group">
                    <label for="codigoMov">C√≥digo del Producto *</label>
                    <div class="autocomplete-container">
                      <input id="codigoMov" type="text" placeholder="C√≥digo del producto" required 
                             onkeyup="buscarProductoAutocompletado()" 
                             onblur="ocultarAutocompletado()" 
                             onfocus="mostrarAutocompletado()">
                      <div id="autocompleteDropdown" class="autocomplete-dropdown"></div>
                    </div>
                  </div>
                  <div class="form-group">
                    <label for="fechaMov">Fecha *</label>
                    <input id="fechaMov" type="date" required>
                  </div>
                  <div class="form-group">
                    <label for="tipoMov">Tipo de Movimiento *</label>
                    <select id="tipoMov" required onchange="handleTipoChange()">
                      <option value="INGRESO">Ingreso</option>
                      <option value="SALIDA">Salida</option>
                      <option value="AJUSTE_POSITIVO">Ajuste Positivo</option>
                      <option value="AJUSTE_NEGATIVO">Ajuste Negativo</option>
                    </select>
                  </div>
                  <div class="form-group">
                    <label for="cantMov">Cantidad *</label>
                    <input id="cantMov" type="number" min="0.01" step="0.01" placeholder="Cantidad" required>
                  </div>
                  <div class="form-group">
                    <label for="obsMov">Observaciones</label>
                    <textarea id="obsMov" placeholder="Observaciones opcionales" rows="3"></textarea>
                  </div>
                </div>
                <div class="actions">
                  <button type="submit" class="btn btn-success">
                    Guardar Movimiento
                  </button>
                  <button type="button" class="btn btn-secondary" onclick="limpiarFormMovimiento()">
                    Limpiar
                  </button>
                </div>
              </form>
              <div id="msgMov"></div>
            </div>
          </div>
        </div>
      </div>

      <div id="inventario" class="tab-content">
        <div class="content-header">
          <h2>Control de Inventario</h2>
        </div>
        <div class="content-body">
          <div class="card">
            <div class="card-header">Stock Actual</div>
            <div class="card-body">
              <div class="actions">
                <button class="btn btn-primary" onclick="mostrarStock()">
                  Actualizar Stock
                </button>
                <button class="btn btn-success" onclick="exportarStock()">
                  Exportar CSV
                </button>
                <button class="btn btn-warning" onclick="mostrarAlertas()">
                  Solo Alertas
                </button>
              </div>
              <div id="loading" class="loading">Cargando inventario...</div>
              <div class="table-container">
                <div id="stockTable"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div id="reportes" class="tab-content">
        <div class="content-header">
          <h2>Reportes y An√°lisis</h2>
        </div>
        <div class="content-body">
          <div class="card">
            <div class="card-header">Historial de Movimientos</div>
            <div class="card-body">
              <div class="form-grid">
                <div class="form-group">
                  <label for="fechaDesde">Fecha Desde</label>
                  <input id="fechaDesde" type="date" required>
                </div>
                <div class="form-group">
                  <label for="fechaHasta">Fecha Hasta</label>
                  <input id="fechaHasta" type="date" required>
                </div>
                <div class="form-group">
                  <label for="filtroTipo">Filtrar por Tipo</label>
                  <select id="filtroTipo">
                    <option value="">Todos los movimientos</option>
                    <option value="INGRESO">Solo Ingresos</option>
                    <option value="SALIDA">Solo Salidas</option>
                    <option value="AJUSTE_POSITIVO">Solo Ajustes Positivos</option>
                    <option value="AJUSTE_NEGATIVO">Solo Ajustes Negativos</option>
                  </select>
                </div>
              </div>
              <div class="actions">
                <button class="btn btn-primary" onclick="mostrarHistorial()">
                  Generar Reporte
                </button>
                <button class="btn btn-success" onclick="exportarReporte()">
                  Exportar Reporte
                </button>
              </div>
              <div class="table-container">
                <div id="historialTable"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div id="buscar" class="tab-content">
        <div class="content-header">
          <h2>B√∫squeda de Productos</h2>
        </div>
        <div class="content-body">
          <div class="card">
            <div class="card-header">Buscar Productos</div>
            <div class="card-body">
              <div class="form-grid">
                <div class="form-group">
                  <label for="buscarTexto">Buscar por c√≥digo, nombre o grupo</label>
                  <input id="buscarTexto" type="text" placeholder="Escriba para buscar..." onkeyup="buscarEnTiempoReal()">
                </div>
              </div>
              <div class="actions">
                <button class="btn btn-primary" onclick="buscarProducto()">
                  Buscar
                </button>
                <button class="btn btn-secondary" onclick="limpiarBusqueda()">
                  Limpiar
                </button>
              </div>
              <div class="table-container">
                <div id="resultadosBusqueda"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div id="configuracion" class="tab-content">
        <div class="content-header">
          <h2>Configuraci√≥n del Sistema</h2>
        </div>
        <div class="content-body">
          <div class="card">
            <div class="card-header">Herramientas de Administraci√≥n</div>
            <div class="card-body">
              <div class="actions">
                <button class="btn btn-info" onclick="validarIntegridad()">
                  Validar Integridad
                </button>
                <button class="btn btn-success" onclick="inicializarSistema()">
                  Inicializar Sistema
                </button>
                <button class="btn btn-warning" onclick="limpiarTodosFormularios()">
                  Limpiar Todo
                </button>
                <button class="btn btn-danger" onclick="confirmarReset()">
                  Reset Sistema
                </button>
              </div>
              <div id="configResults"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    let currentTab = 'dashboard';
    let searchTimeout;
    let autocompleteTimeout;

    function initializeApp() {
      setDefaultDates();
      loadListas();
      loadDashboard();
      showTab('dashboard');
    }

    function setDefaultDates() {
      const today = new Date();
      const monthAgo = new Date();
      monthAgo.setMonth(monthAgo.getMonth() - 1);

      document.getElementById("fechaMov").valueAsDate = today;
      document.getElementById("fechaDesde").valueAsDate = monthAgo;
      document.getElementById("fechaHasta").valueAsDate = today;
    }

    function showTab(tabName) {
      document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
      });
      
      document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.remove('active');
      });
      
      document.getElementById(tabName).classList.add('active');
      event.target.classList.add('active');
      
      currentTab = tabName;
      
      switch(tabName) {
        case 'dashboard':
          loadDashboard();
          break;
        case 'inventario':
          mostrarStock();
          break;
      }
    }

    function loadDashboard() {
      google.script.run.withSuccessHandler(data => {
        const statsGrid = document.getElementById('statsGrid');
        statsGrid.innerHTML = `
          <div class="stat-card">
            <div class="stat-value">${data.totalProductos}</div>
            <div class="stat-label">Total Productos</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${data.totalMovimientos}</div>
            <div class="stat-label">Total Movimientos</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${data.sinStock}</div>
            <div class="stat-label">Sin Stock</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${data.stockBajo}</div>
            <div class="stat-label">Stock Bajo</div>
          </div>
        `;
      }).withFailureHandler(error => {
        showMessage('statsGrid', 'Error al cargar dashboard: ' + error, 'error');
      }).obtenerResumen();
    }

    function loadListas() {
      google.script.run.withSuccessHandler(data => {
        const unidadSelect = document.getElementById("unidadProd");
        const grupoSelect = document.getElementById("grupoProd");

        unidadSelect.innerHTML = "";
        grupoSelect.innerHTML = "";

        data.unidades.forEach(u => {
          unidadSelect.innerHTML += `<option value="${u}">${u}</option>`;
        });
        data.grupos.forEach(g => {
          grupoSelect.innerHTML += `<option value="${g}">${g}</option>`;
        });
      }).withFailureHandler(error => {
        console.error('Error loading lists:', error);
      }).obtenerListas();
    }

    function buscarProductoAutocompletado() {
      clearTimeout(autocompleteTimeout);
      const input = document.getElementById("codigoMov");
      const dropdown = document.getElementById("autocompleteDropdown");
      const codigo = input.value.trim().toUpperCase();
      
      if (codigo.length === 0) {
        dropdown.style.display = "none";
        return;
      }
      
      autocompleteTimeout = setTimeout(() => {
        google.script.run.withSuccessHandler(productos => {
          mostrarAutocompletado(productos);
        }).withFailureHandler(error => {
          console.error('Error en autocompletado:', error);
        }).buscarProductoPorCodigo(codigo);
      }, 200);
    }

    function mostrarAutocompletado(productos = []) {
      const dropdown = document.getElementById("autocompleteDropdown");
      
      if (productos.length === 0) {
        dropdown.style.display = "none";
        return;
      }
      
      let html = "";
      productos.forEach(producto => {
        html += `
          <div class="autocomplete-item" onmousedown="seleccionarProducto('${producto.codigo}', '${producto.nombre}')">
            <div class="autocomplete-code">${producto.codigo}</div>
            <div class="autocomplete-name">${producto.nombre} - ${producto.grupo}</div>
          </div>
        `;
      });
      
      dropdown.innerHTML = html;
      dropdown.style.display = "block";
    }

    function seleccionarProducto(codigo, nombre) {
      document.getElementById("codigoMov").value = codigo;
      document.getElementById("autocompleteDropdown").style.display = "none";
    }

    function ocultarAutocompletado() {
      setTimeout(() => {
        document.getElementById("autocompleteDropdown").style.display = "none";
      }, 150);
    }

    function registrarProducto(event) {
      event.preventDefault();
      
      const producto = {
        codigo: document.getElementById("codigoProd").value.trim().toUpperCase(),
        nombre: document.getElementById("nombreProd").value.trim(),
        unidad: document.getElementById("unidadProd").value,
        grupo: document.getElementById("grupoProd").value,
        stockMin: parseInt(document.getElementById("stockMinProd").value) || 0
      };

      if (!producto.codigo || !producto.nombre) {
        showMessage('msgProd', 'C√≥digo y nombre son campos obligatorios', 'error');
        return;
      }

      google.script.run.withSuccessHandler(mensaje => {
        showMessage('msgProd', mensaje, mensaje.includes('correctamente') ? 'success' : 'error');
        if (mensaje.includes('correctamente')) {
          document.getElementById('formProducto').reset();
          document.getElementById("stockMinProd").value = "0";
        }
      }).withFailureHandler(error => {
        showMessage('msgProd', 'Error: ' + error, 'error');
      }).registrarProducto(producto);
    }

    function registrarMovimiento(event) {
      event.preventDefault();
      
      const movimiento = {
        codigo: document.getElementById("codigoMov").value.trim().toUpperCase(),
        fecha: document.getElementById("fechaMov").value,
        tipo: document.getElementById("tipoMov").value,
        cantidad: parseFloat(document.getElementById("cantMov").value) || 0,
        observaciones: document.getElementById("obsMov").value.trim()
      };

      if (!movimiento.codigo || !movimiento.fecha || movimiento.cantidad <= 0) {
        showMessage('msgMov', 'Todos los campos son obligatorios y la cantidad debe ser mayor a 0', 'error');
        return;
      }

      google.script.run.withSuccessHandler(mensaje => {
        showMessage('msgMov', mensaje, mensaje.includes('correctamente') ? 'success' : 'error');
        if (mensaje.includes('correctamente')) {
          document.getElementById('formMovimiento').reset();
          document.getElementById("fechaMov").valueAsDate = new Date();
        }
      }).withFailureHandler(error => {
        showMessage('msgMov', 'Error: ' + error, 'error');
      }).registrarMovimiento(movimiento);
    }

    function handleTipoChange() {
      const tipo = document.getElementById("tipoMov").value;
      const cantField = document.getElementById("cantMov");
      
      switch(tipo) {
        case 'INGRESO':
          cantField.placeholder = 'Cantidad a ingresar';
          break;
        case 'SALIDA':
          cantField.placeholder = 'Cantidad a retirar';
          break;
        case 'AJUSTE_POSITIVO':
          cantField.placeholder = 'Cantidad a aumentar';
          break;
        case 'AJUSTE_NEGATIVO':
          cantField.placeholder = 'Cantidad a disminuir';
          break;
      }
    }

    function buscarProducto() {
      const texto = document.getElementById("buscarTexto").value.trim();
      if (!texto) {
        showMessage('resultadosBusqueda', 'Ingrese un texto para buscar', 'warning');
        return;
      }

      google.script.run.withSuccessHandler(data => {
        displaySearchResults(data);
      }).withFailureHandler(error => {
        showMessage('resultadosBusqueda', 'Error en la b√∫squeda: ' + error, 'error');
      }).buscarProducto(texto);
    }

    function buscarEnTiempoReal() {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        const texto = document.getElementById("buscarTexto").value.trim();
        if (texto.length >= 2) {
          buscarProducto();
        } else if (texto.length === 0) {
          document.getElementById('resultadosBusqueda').innerHTML = '';
        }
      }, 300);
    }

    function displaySearchResults(data) {
      const container = document.getElementById('resultadosBusqueda');
      
      if (data.length === 0) {
        container.innerHTML = '<div class="message warning">No se encontraron productos</div>';
        return;
      }

      let html = `
        <table>
          <thead>
            <tr>
              <th>C√≥digo</th>
              <th>Nombre</th>
              <th>Unidad</th>
              <th>Grupo</th>
              <th>Stock M√≠n.</th>
              <th>Stock Actual</th>
              <th>Estado</th>
            </tr>
          </thead>
          <tbody>
      `;

      data.forEach(producto => {
        const [codigo, nombre, unidad, grupo, stockMin, stockActual] = producto;
        let statusClass = 'status-normal';
        let estado = 'Normal';
        
        if (stockActual <= 0) {
          statusClass = 'status-zero';
          estado = 'Sin Stock';
        } else if (stockActual <= stockMin && stockMin > 0) {
          statusClass = 'status-low';
          estado = 'Stock Bajo';
        }

        html += `
          <tr class="${statusClass}">
            <td>${codigo}</td>
            <td>${nombre}</td>
            <td>${unidad}</td>
            <td>${grupo}</td>
            <td>${stockMin}</td>
            <td>${stockActual}</td>
            <td>${estado}</td>
          </tr>
        `;
      });

      html += '</tbody></table>';
      container.innerHTML = html;
    }

    function mostrarStock() {
      const loading = document.getElementById("loading");
      const container = document.getElementById("stockTable");
      
      loading.style.display = "block";
      
      google.script.run.withSuccessHandler(data => {
        loading.style.display = "none";
        displayStockTable(data, container);
      }).withFailureHandler(error => {
        loading.style.display = "none";
        showMessage('stockTable', 'Error al cargar stock: ' + error, 'error');
      }).obtenerStock();
    }

    function displayStockTable(data, container) {
      if (data.length === 0) {
        container.innerHTML = '<div class="message warning">No hay productos registrados</div>';
        return;
      }

      let html = `
        <table>
          <thead>
            <tr>
              <th>C√≥digo</th>
              <th>Nombre</th>
              <th>Unidad</th>
              <th>Grupo</th>
              <th>Stock M√≠n.</th>
              <th>Stock Actual</th>
              <th>Estado</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
      `;

      data.forEach(producto => {
        let statusClass = 'status-normal';
        let estado = 'Normal';
        
        if (producto.cantidad <= 0) {
          statusClass = 'status-zero';
          estado = 'Sin Stock';
        } else if (producto.cantidad <= producto.stockMin && producto.stockMin > 0) {
          statusClass = 'status-low';
          estado = 'Stock Bajo';
        }

        html += `
          <tr class="${statusClass}">
            <td>${producto.codigo}</td>
            <td>${producto.nombre}</td>
            <td>${producto.unidad}</td>
            <td>${producto.grupo}</td>
            <td>${producto.stockMin}</td>
            <td>${producto.cantidad}</td>
            <td>${estado}</td>
            <td>
              <button class="btn btn-info" onclick="verDetalleProducto('${producto.codigo}')" title="Ver detalle">
                Ver
              </button>
            </td>
          </tr>
        `;
      });

      html += '</tbody></table>';
      container.innerHTML = html;
    }

    function mostrarAlertas() {
      const loading = document.getElementById("loading");
      const container = document.getElementById("stockTable");
      
      loading.style.display = "block";
      
      google.script.run.withSuccessHandler(data => {
        loading.style.display = "none";
        const alertProducts = data.filter(p => p.cantidad <= 0 || (p.cantidad <= p.stockMin && p.stockMin > 0));
        
        if (alertProducts.length === 0) {
          container.innerHTML = '<div class="message success">No hay productos con alertas de stock</div>';
          return;
        }
        
        displayStockTable(alertProducts, container);
      }).withFailureHandler(error => {
        loading.style.display = "none";
        showMessage('stockTable', 'Error: ' + error, 'error');
      }).obtenerStock();
    }

    function showStockAlerts() {
      google.script.run.withSuccessHandler(data => {
        const alertProducts = data.filter(p => p.cantidad <= 0 || (p.cantidad <= p.stockMin && p.stockMin > 0));
        const container = document.getElementById('alertsContainer');
        
        if (alertProducts.length === 0) {
          container.innerHTML = '<div class="message success">No hay productos con alertas de stock</div>';
          return;
        }

        let html = `
          <div class="message warning">
            <strong>${alertProducts.length} producto(s) requieren atenci√≥n</strong>
          </div>
          <table>
            <thead>
              <tr><th>C√≥digo</th><th>Nombre</th><th>Stock Actual</th><th>Stock M√≠n.</th><th>Estado</th></tr>
            </thead>
            <tbody>
        `;

        alertProducts.forEach(p => {
          const estado = p.cantidad <= 0 ? 'Sin Stock' : 'Stock Bajo';
          const statusClass = p.cantidad <= 0 ? 'status-zero' : 'status-low';
          
          html += `
            <tr class="${statusClass}">
              <td>${p.codigo}</td>
              <td>${p.nombre}</td>
              <td>${p.cantidad}</td>
              <td>${p.stockMin}</td>
              <td>${estado}</td>
            </tr>
          `;
        });

        html += '</tbody></table>';
        container.innerHTML = html;
      }).obtenerStock();
    }

    function mostrarHistorial() {
      const filtros = {
        fechaDesde: document.getElementById("fechaDesde").value,
        fechaHasta: document.getElementById("fechaHasta").value,
        tipo: document.getElementById("filtroTipo").value
      };

      if (!filtros.fechaDesde || !filtros.fechaHasta) {
        showMessage('historialTable', 'Seleccione las fechas de consulta', 'warning');
        return;
      }

      google.script.run.withSuccessHandler(data => {
        displayHistorialTable(data);
      }).withFailureHandler(error => {
        showMessage('historialTable', 'Error: ' + error, 'error');
      }).obtenerHistorial(filtros);
    }

    function displayHistorialTable(data) {
      const container = document.getElementById('historialTable');
      
      if (data.length === 0) {
        container.innerHTML = '<div class="message warning">No hay movimientos en el per√≠odo seleccionado</div>';
        return;
      }

      let html = `
        <div class="message success">Se encontraron ${data.length} movimientos</div>
        <table>
          <thead>
            <tr>
              <th>Fecha</th>
              <th>C√≥digo</th>
              <th>Producto</th>
              <th>Tipo</th>
              <th>Cantidad</th>
              <th>Observaciones</th>
            </tr>
          </thead>
          <tbody>
      `;

      data.forEach(mov => {
        let tipoClass = 'text-success';
        let tipoText = mov.tipo;
        
        switch(mov.tipo) {
          case 'INGRESO':
            tipoClass = 'text-success';
            tipoText = 'Ingreso';
            break;
          case 'SALIDA':
            tipoClass = 'text-danger';
            tipoText = 'Salida';
            break;
          case 'AJUSTE_POSITIVO':
            tipoClass = 'text-success';
            tipoText = 'Ajuste +';
            break;
          case 'AJUSTE_NEGATIVO':
            tipoClass = 'text-danger';
            tipoText = 'Ajuste -';
            break;
          case 'AJUSTE':
            tipoClass = 'text-warning';
            tipoText = 'Ajuste';
            break;
        }

        html += `
          <tr>
            <td>${mov.fecha}</td>
            <td>${mov.codigo}</td>
            <td>${mov.producto}</td>
            <td class="${tipoClass}">${tipoText}</td>
            <td>${mov.cantidad}</td>
            <td>${mov.observaciones}</td>
          </tr>
        `;
      });

      html += '</tbody></table>';
      container.innerHTML = html;
    }

    function validarIntegridad() {
      google.script.run.withSuccessHandler(data => {
        let html = '<h4>Validaci√≥n de Integridad del Sistema</h4>';
        
        if (data.errores.length === 0) {
          html += '<div class="message success">Todos los datos est√°n correctos. El sistema est√° √≠ntegro.</div>';
        } else {
          html += '<div class="message error"><strong>Se encontraron los siguientes errores:</strong></div>';
          html += '<ul>';
          data.errores.forEach(error => {
            html += `<li class="text-danger">${error}</li>`;
          });
          html += '</ul>';
        }
        
        document.getElementById("configResults").innerHTML = html;
      }).withFailureHandler(error => {
        showMessage('configResults', 'Error en validaci√≥n: ' + error, 'error');
      }).validarIntegridad();
    }

    function inicializarSistema() {
      if (confirm('¬øEst√° seguro de que desea inicializar el sistema? Esto crear√° las hojas necesarias si no existen.')) {
        google.script.run.withSuccessHandler(mensaje => {
          showMessage('configResults', mensaje, mensaje.includes('correctamente') ? 'success' : 'error');
          if (mensaje.includes('correctamente')) {
            loadListas();
            loadDashboard();
          }
        }).withFailureHandler(error => {
          showMessage('configResults', 'Error: ' + error, 'error');
        }).inicializarHojas();
      }
    }

    function exportarStock() {
      google.script.run.withSuccessHandler(url => {
        if (url) {
          window.open(url, '_blank');
          showMessage('stockTable', 'Stock exportado exitosamente', 'success');
        } else {
          showMessage('stockTable', 'Error al exportar stock', 'error');
        }
      }).withFailureHandler(error => {
        showMessage('stockTable', 'Error: ' + error, 'error');
      }).exportarStockCSV();
    }

    function limpiarFormProducto() {
      document.getElementById('formProducto').reset();
      document.getElementById("stockMinProd").value = "0";
      document.getElementById('msgProd').innerHTML = '';
    }

    function limpiarFormMovimiento() {
      document.getElementById('formMovimiento').reset();
      document.getElementById("fechaMov").valueAsDate = new Date();
      document.getElementById('msgMov').innerHTML = '';
      document.getElementById("autocompleteDropdown").style.display = "none";
    }

    function limpiarBusqueda() {
      document.getElementById("buscarTexto").value = "";
      document.getElementById("resultadosBusqueda").innerHTML = "";
    }

    function limpiarTodosFormularios() {
      limpiarFormProducto();
      limpiarFormMovimiento();
      limpiarBusqueda();
      document.getElementById('historialTable').innerHTML = '';
      document.getElementById('configResults').innerHTML = '';
    }

    function showMessage(containerId, message, type) {
      const container = document.getElementById(containerId);
      let className = 'message';
      
      switch(type) {
        case 'success':
          className += ' success';
          break;
        case 'error':
          className += ' error';
          break;
        case 'warning':
          className += ' warning';
          break;
        case 'info':
          className += ' info';
          break;
        default:
          className += ' success';
      }
      
      container.innerHTML = `<div class="${className}">${message}</div>`;
      
      if (type === 'success') {
        setTimeout(() => {
          container.innerHTML = '';
        }, 5000);
      }
    }

    function verDetalleProducto(codigo) {
      alert(`Funcionalidad de detalle para producto: ${codigo}\nEsta funci√≥n se implementar√° pr√≥ximamente.`);
    }

    function confirmarReset() {
      if (confirm('ADVERTENCIA: Esta acci√≥n eliminar√° TODOS los datos del sistema.\n\n¬øEst√° completamente seguro de que desea continuar?')) {
        if (confirm('Esta es su √∫ltima oportunidad para cancelar.\n\n¬øProceder con el reset completo?')) {
          alert('Funcionalidad de reset no implementada por seguridad.\nContacte al administrador del sistema.');
        }
      }
    }

    function exportarReporte() {
      const filtros = {
        fechaDesde: document.getElementById("fechaDesde").value,
        fechaHasta: document.getElementById("fechaHasta").value,
        tipo: document.getElementById("filtroTipo").value
      };

      if (!filtros.fechaDesde || !filtros.fechaHasta) {
        showMessage('historialTable', 'Seleccione las fechas para exportar', 'warning');
        return;
      }

      google.script.run.withSuccessHandler(data => {
        if (data.length === 0) {
          showMessage('historialTable', 'No hay datos para exportar en el per√≠odo seleccionado', 'warning');
          return;
        }

        let csv = 'Fecha,C√≥digo,Producto,Tipo,Cantidad,Observaciones\n';
        data.forEach(mov => {
          csv += `"${mov.fecha}","${mov.codigo}","${mov.producto}","${mov.tipo}","${mov.cantidad}","${mov.observaciones}"\n`;
        });

        const blob = new Blob([csv], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = `Reporte_Movimientos_${filtros.fechaDesde}_${filtros.fechaHasta}.csv`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        
        showMessage('historialTable', 'Reporte exportado exitosamente', 'success');
      }).obtenerHistorial(filtros);
    }

    document.addEventListener('keydown', function(event) {
      if ((event.ctrlKey || event.metaKey) && event.key === 's') {
        event.preventDefault();
        
        switch(currentTab) {
          case 'productos':
            document.getElementById('formProducto').dispatchEvent(new Event('submit'));
            break;
          case 'movimientos':
            document.getElementById('formMovimiento').dispatchEvent(new Event('submit'));
            break;
        }
      }
      
      if ((event.ctrlKey || event.metaKey) && event.key === 'r') {
        event.preventDefault();
        
        switch(currentTab) {
          case 'dashboard':
            loadDashboard();
            break;
          case 'inventario':
            mostrarStock();
            break;
        }
      }
    });

    document.addEventListener('click', function(event) {
      if (!event.target.closest('.autocomplete-container')) {
        document.getElementById("autocompleteDropdown").style.display = "none";
      }
    });
  </script>
</body>
</html>